{"version":3,"file":"leaflet-tilelayer-colorfilter-global.min.js","sources":["../src/leaflet-tilelayer-colorfilter.js"],"sourcesContent":["/*\n  Leaflet.TileLayer.ColorFilter\n  (c) 2018-2025, Claudio T. Kawakani\n  A simple and lightweight Leaflet plugin to apply CSS filters on map tiles.\n  https://github.com/xtk93x/Leaflet.TileLayer.ColorFilter\n*/\nimport { TileLayer } from 'leaflet';\n\nconst colorFilter = function () {\n    let VALIDFILTERS = [\n        'blur:px',\n        'brightness:%', 'bright:brightness:%', 'bri:brightness:%',\n        'contrast:%', 'con:contrast:%',\n        'grayscale:%', 'gray:grayscale:%',\n        'hue-rotate:deg', 'hue:hue-rotate:deg', 'hue-rotation:hue-rotate:deg',\n        'invert:%', 'inv:invert:%',\n        'opacity:%', 'op:opacity:%',\n        'saturate:%', 'saturation:saturate:%', 'sat:saturate:%',\n        'sepia:%', 'sep:sepia:%',\n    ]\n\n    let colorFilterOptions = this.options.colorFilter ? this.options.colorFilter : [];\n    let filterSettings = colorFilterOptions.map((opt) => {\n        let filter = opt.toLowerCase().split(':');\n        if (filter.length === 2) {\n            let match = VALIDFILTERS.find(vf => {\n                return (vf.split(':')[0] === filter[0]);\n            });\n            if (match) {\n                match = match.split(':');\n                filter[1] += /^\\d+$/.test(filter[1]) ? match[match.length - 1] : ''\n                return (`${match[match.length - 2]}(${filter[1]})`);\n            }\n        }\n        return ('');\n    }).join(' ');\n    return (filterSettings);\n};\n\nconst updateColorFilter = function (newFilter) {\n    this.options.colorFilter = newFilter;\n    if (this._container) {\n        this._container.style.filter = this._colorFilter();\n    }\n};\n\nconst originalOnAdd = TileLayer.prototype.onAdd;\n\nTileLayer.include({\n    _colorFilter: colorFilter,\n    updateColorFilter: updateColorFilter,\n    onAdd: function(map) {\n        originalOnAdd.call(this, map);\n        if (this.options.colorFilter) {\n            this._container.style.filter = this._colorFilter();\n        }\n    }\n});"],"names":["originalOnAdd","TileLayer","prototype","onAdd","leaflet","include","_colorFilter","VALIDFILTERS","this","options","colorFilter","map","opt","filter","toLowerCase","split","length","match","find","vf","test","join","updateColorFilter","newFilter","_container","style","call"],"mappings":";;;;;;IAQA,MAsCMA,EAAgBC,EAAAA,UAAUC,UAAUC,MAEjCC,EAAAH,UAACI,QAAQ,CACdC,aAzCgB,WAChB,IAAIC,EAAe,CACf,UACA,eAAgB,sBAAuB,mBACvC,aAAc,iBACd,cAAe,mBACf,iBAAkB,qBAAsB,8BACxC,WAAY,eACZ,YAAa,eACb,aAAc,wBAAyB,iBACvC,UAAW,eAkBf,OAfyBC,KAAKC,QAAQC,YAAcF,KAAKC,QAAQC,YAAc,IACvCC,IAAKC,IACzC,IAAIC,EAASD,EAAIE,cAAcC,MAAM,KACrC,GAAsB,IAAlBF,EAAOG,OAAc,CACrB,IAAIC,EAAQV,EAAaW,KAAKC,GAClBA,EAAGJ,MAAM,KAAK,KAAOF,EAAO,IAExC,GAAII,EAGA,OAFAA,EAAQA,EAAMF,MAAM,KACpBF,EAAO,IAAM,QAAQO,KAAKP,EAAO,IAAMI,EAAMA,EAAMD,OAAS,GAAK,GACjE,GAAWC,EAAMA,EAAMD,OAAS,MAAMH,EAAO,KAEpD,CACD,MAAA,KACDQ,KAAK,IAEZ,EAaIC,kBAXsB,SAAUC,GAChCf,KAAKC,QAAQC,YAAca,EACvBf,KAAKgB,aACLhB,KAAKgB,WAAWC,MAAMZ,OAASL,KAAKF,eAE5C,EAOIH,MAAO,SAASQ,GACZX,EAAc0B,KAAKlB,KAAMG,GACrBH,KAAKC,QAAQC,cACbF,KAAKgB,WAAWC,MAAMZ,OAASL,KAAKF,eAE3C"}